using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Operator
{
    /*
     * 연산자의 정의와 종류
     * 산술연산자
     * 증가,감소 연산자
     * 문자열 결합 연산자
     * 관계 연산자
     * 논리 연산자
     * 비트 연산자
     * 할당 연산자
     * 
     *    연산자 (Operator)
     *      컴파일러에게 데이터 가공을 지시하는 기호
     *      종류 : 산술, 관계, 논리, 비트, 할당, 기타등등
     *      
     *    
     *    C# 에서 제공하는 연산자
     *    산술 연산자 : +, -, *, /, %
     *    증가/감소 연산자 : ++, --
     *    관계 연산자 : <, >, ==, !=, <=, >=
     *    조건 연산자 : ?
     *    논리 연산자 : &&, ||, !
     *    비트 연산자 : <<, >>, &, ", ^, ~
     *    할당 연산자 : =, +=, -=, *=, /=, &=, |=, ^=, <<=, >>=
     *    
     *    산술 연산자
     *      수치 형식의 데이터를 다루는 연산자
     *          정수 형식과 부동소수점 형싱, Decimal 형식에 대해서만 사용가능
     *      두 개의 피연산자가 필요한 이항 연산자(Binary Operator)
     *    
     *    +  양쪽의 피연산자 더하기                                  모든 수치데이터
     *    -  왼쪽 피연산자에서 오른쪽 피연산자를 차감                  모든 수치데이터
     *    *  양쪽 피연산자를 곱하기                                 모든 수치 데이터
     *    /  왼쪽 연산자를 오른쪽 피연산자로 나눅 몫                 모든 수치데이터
     *    %  왼쪽 연산자를 오른쪽 연산자로 나눈 후의 나머지를 구한다  모든 수치 데이터
     *    
     *    증가연산자와 감소 연산자(증감 연산자)
     *      증가 연산자는 피연산자의 값을 1증가
     *      감소 연산자는 피연산자의 값을 1감소
     *      
     *      ++  증가 연산자  피연산자의 값을 1증가 시킨다  모든 수치 데이터 형식과 열거 형식
     *      --  감소 연산자  피연산자의 값을 1감소 시킨다  모든 수치 데이터 형식과 열거 형식
     *    
     *      전위/후위 연산자의 차이
     *          증가 연산자
     *              int a = 10;
     *              Console.WriteLine(a++); // 11 이아닌 10을 출력 출력후 a는 11
     *              Console.WriteLine(++a); // 12를 출력
     *          감소 연산자
     *              int a = 10;
     *              Console.WriteLine(a--); // 9가 아닌 10을 출력 출력후 a는 9
     *              Console.WriteLine(--a); // 8출력
     *     
     *     문자열 결합 연산자
     *          int result = 123 + 456;  // 579 출력  수치 형식에 사용하는 + 연산자는 덧셈 연산자
     *          string result = "123" + "456"; // 123456 출력  string형식에 사용하는 + 연산자는 덧셈 연산자가 아닌 문자열 결합 연산자
     *          
     *     관계 연산자
     *          관계연산자(Relational Operator)는 두 피연산자 사이의 관계를 확인하는 연산자
     *          <  왼쪽 피연산자가 오른쪽 피연산자보다 작으면 참, 아니면 거짓  모든 수치 형식과 열거 형식
     *          >  왼쪽 피연산자가 오른쪽 피연산자보다 크면 참, 아니면 거짓    모든 수치 형식과 열거 형식
     *          <=  왼쪽 피연산자가 오른쪽 피연산자보다 작거나 같으면 참, 아니면 거짓  모든 수치 형식과 열거 형식
     *          >=  왼쪽 피연산자가 오른쪽 피연산자보다 크거나 같으면 참, 아니면 거짓  모든 수치 형식과 열거 형식
     *          ==  왼쪽 피연산자가 오른쪽 피연산자와 같으면 참, 아니면 거짓  모든 데이터 형식에 대해 사용가능
     *          !=  왼쪽 피연산자가 오른쪽 피연산자와 다르면 참, 아니면 거짓  모든 데이터 형식에 대해 사용가능 string과 object형식에서도 사용 가능
     *    
     *    논리 연산자
     *      논리 연산 (Logical Operation)
     *          부울 연산 (boolean Operation)이라고도 하며, 참과 거짓의 진리값이 피연산자인 연산
     *          
     *          A  B             A && B         A || B          !A
     *          참 거짓             참             참           거짓
     *          참 거짓             거짓           참           거짓
     *          거짓 거짓           거짓           거짓           참
     *          거짓 참             거짓           참             참
     *    
     *    조건 연산자
     *      조건 연산자(Conditional Operator)는 조건에 따라 두 값중 하나의 값을 반환
     *      [조건식] ? 참일때의 값 : 거짓일 때의 값;
     *      
     *      
     *    비트 연산자
     *          비트 연산자 : 비트 수준에서 데이터를 가공하는 연산자
     *          <<  왼쪽 시프트 연산자  첫 번째 피연산자의 비트를 두번째 피연산자의 수만큼 왼쪽으로 이동  첫번째 피연산자는 int, uint, long, ulong 이며 피연산자는 int 형식만 지원
     *          >>  오른쪽 시프트 연산자  첫 번째 피연산자의 비트를 두 번째 피연산자의 수만큼 오른쪽으로 이동  << 와같음
     *          &  논리곱(AND)연산자  두 피연산자의 비트 논리곱을 수행  정수 계열 형식과 bool 형식에 대해 사용
     *          |  논리합(|)연산자  두 피연산자의 비트 논리합을 수행  &와 같음
     *          ^ 배타적 논리합(XOR)연산자  두 피연산자의 비트 배타적 논리합 수행  &와 같음
     *          ~ 보수(NOT)연산자  피연산자의 비트를 0은 1로, 1은 0으로 반전, 단항연산자  int, uint, long, ulong 에대해 사용이 가능
     *          
     *     할당 연산자
     *          할당 연산자 (Assignment) : 변수 또는 상수에 피연산자를 할당
     *          =  할당 연산자  오른쪽 피연산자를 왼쪽 피연산자에게 할당
     *          += 덧셈 할당 연산자  a += b; 는 a = a + b 와 같다
     *          -= 뺄셈 할당 연산자  a -= b; 는 a = a - b 와 같다
     *          *= 곱셈 할당 연산자  a *= b; 는 a = a * b 와 같다
     *          /= 나눗셈 할당 연산자  a /= b; 는 a = a / b 와 같다
     *          %/ 나머지 할당 연산자 a %= b; 는 a = a % b 와 같다
     *          &= 논리곱 할당 연산자 a &= b; 는 a = a & b 와 같다
     *          |= 논리합 할당 연산자 a |= b; 는 a = a | b 와 같다
     *          ^= 배타적 논리합 할당 연산자 a ^= b; 는 a = a ^ b 와 같다
     *          <<= 왼쪽 시프트 할당 연산자 a <<= b; 는 a = a << b 와 같다
     *          >>= 오른쪽 시프트 할당 연산자 a >> = b;는 a = a >> b 와 같다
     */
    internal class Program
    {
        static void Main(string[] args)
        {
        }
    }
}
