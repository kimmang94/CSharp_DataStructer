using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Class
{
    /*
     * 클래스와 객체
     *  클래스의 선언과 객체의 생성
     *  생성자와 종료자
     *  this 키워드
     *  접근한정자
     *  상속과 오버라이딩
     *  구조체
     *  튜플
     * 
     *  객체지향 프로그래밍 (OOP)
     *      코드 내의 모든 것을 객체(Object)로 표현하고자 하는 프로그래밍 패러다임
     *      객체는 데이터(속성)와 기능(메소드)로 이루어짐
     *      
     *      절자척 프로그래밍 : 코드의 순차적인 실행
     *      객체지향 프로그래밍 : 객체간의 상호 작용
     *      
     *      클래스와 객체
     *          클래스는 객체를 만들기 위한 청사진
     *          클래스
     *              형식 또는 설계도
     *              각 형식/ 클래스 별로 하나만 존재
     *              객체가 어떤 데이터 항목을 가지는지 정의
     *              어떤 메소드를 가질지를 정의
     *          객체
     *              메모리에 적재된 실체
     *              이론적으로는 무한대로 생성 가능 하며, 메모리를 차지함
     *              선언된 데이터 항목에 실제 데이터 저장
     *              정의되어 있는 메소드를 실행
     *       클래스 선언
     *       class 키워드 이용
     *       속성 -> 클래스의 변수 -> 필드
     *       기능 -> 메소드
     *       
     *       class 클래스이름
     *       {
     *          // 속성
     *          // 기능
     *       }
     *       
     *       객체 생성
     *          new 연산자와 생성자 이용
     *          객체의 멤버(필드 및 메소드 등등)에 접근할 때는 .연산자 사용
     *          
     *        생성자와 종료자
     *          생성자 : 객체가 생성될 때 호출
     *          종료자 : 객체가 소멸될 때 호출
     *          생성자와 종료자의 명시적 구현은 선택사항
     *          
     *          class 클래스이름
     *          {
     *              한정자 클래스이름(매개변수목록)            - 생성자
     *              {                                       - 
     *                                                      - 
     *              }                                       - 
     *          }
     *          
     *          ~클래스이름()                                      - 종료자
     *          {                                                 -  
     *                                                            -
     *          }                                                 -
     *          
     *          필드
     *          메소드
     *        }
     *        
     *        생성자 오버로딩
     *         객체의 필드를 초기화하는 다양한 옵션 제공 가능
     *         
     *        this 키워드
     *          객체를 사용하는 코드에서는 참조로 객체를 지칭함
     *          this는 객체 내부에서 자신을 지칭할 때 사용하는키워드
     *          
     *          class Employee
     *          {
     *              private string Name;
     *              public void SetName( string Name )
     *              {
     *                  this.Name = Name;
     *              }
     *          }
     *          
     *      접근 한정자
     *          객체간의 상호작용이 중심인 OOP에서는 각 객체는 다른 객체에게 자신의 내부 사정을 공유하지 않음
     *          다른 객체에게 공유해야 하는 멤버만 접근한정자를 이용하여 공개
     *          접근 한정자는 멤버(필드, 메소드 등등)를 외부에 어떤 수준으로 공개할 지 지정
     *          public : 모든 곳에서 접근 가능
     *          protected : 외부에선 접근 불가, 파생클래스에서는 접근 가능
     *          private : 클래스 내부에서만 접근 가능, 파생클래스에서도 접근 불가능
     *          
     *       상속과 오버라이딩
     *          상속 : 다른 클래스로부터 코드를 물려 받는것
     *          상속의 대상 : 클래스의 멤버(필드, 메소드, 프로퍼티 등)
     *          새로 선언하는 클래스 이름 뒤에 콜론(:) 과 기반 클래스의 이름을 표기하여 상속
     *          물려주는 클래스 : 기반/부모 클래스, 물려받는 클래스 : 파생/자식 클래스
     *          
     *        오버라이딩
     *          기반 클래스에서 선언된 메소드를 자식 클래스에서 재정의 하는것
     *          기반 클래스에서 오버라이딩 할 메소드를 미리 virtual로 한정
     *          파생 클래스는 virtual 메소드를 override 한정자를 이용하여 재선언
     *        
     *        구조체
     *          class 대신 struct 를 이용하여 선언
     *          클래스는 참조형식, 구조체는 값형식
     *          클래스 인스턴스는 가비지 콜렉터가 제거, 구조체 인스턴스는 스택이 자동 제거
     *          
     *        튜플
     *          기본적으로는 구조체, 즉 값형식
     *          형식 이름 없이 선언하여 사용
     *          일부 코드에서 즉석에서 활용되는 형식을 만들 때 적합
     *          프로그램 전역에서 사용할 형식에는 부적합
     *          
     *          var tuple = (123, 789);
     *        
     */
    internal class Program
    {
        static void Main(string[] args)
        {
        }
    }
}
